{"version":3,"sources":["context/context.js","components/DateTimePicker/index.jsx","components/ApplicationBar/index.jsx","components/ScheduleChip/index.jsx","components/constans/const.js","components/CalendarElement/index.jsx","components/AddScheduleDialog/index.jsx","components/Calendar/index.jsx","App.js","serviceWorker.js","index.js"],"names":["initialState","date","Date","schedules","StateContext","React","createContext","setState","LocalizedUtils","format","locale","this","DateFnsUtils","DateTimePicker","value","onChange","type","label","dateComponent","DatePicker","disableToolbar","variant","inputVariant","autoOk","timeComponent","TimePicker","ampm","fullWidth","datetimeComponent","utils","ApplicationBar","useContext","state","AppBar","color","position","Toolbar","Typography","IconButton","onClick","setMonth","getMonth","Icon","SchduleChip","text","className","whatList","CalendarElement","showDayOfWeek","selectedDate","isThisMonth","getFullYear","isSelected","getDate","day","getDay","modifire","Paper","square","filter","s","toLocaleDateString","map","i","key","find","e","what","time","PaperComponent","props","handle","DialogTitle","withStyles","theme","root","margin","padding","spacing","closeButton","right","top","palette","grey","children","onClose","classes","disableTypography","id","aria-label","AddScheduleDialog","useState","open","setOpen","getTime","whenStart","setWhenStart","whenEnd","setWhenEnd","setWhat","Math","floor","handleClose","Dialog","style","cursor","DialogContent","TextField","select","event","target","MenuItem","DialogActions","Button","schedule","push","Fab","Calendar","dateList","Array","keys","setDate","isToday","GridList","cellHeight","cols","GridListTile","thisMonth","today","App","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b11ff3d9.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst today = new Date();\r\n\r\nexport const initialState = {\r\n  date: today,\r\n  schedules: []\r\n}\r\n\r\nexport const StateContext = React.createContext({\r\n  initialState,\r\n  setState: () => {}\r\n});\r\n","import React from \"react\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport { format } from \"date-fns\";\r\nimport { MuiPickersUtilsProvider, DatePicker, TimePicker } from \"@material-ui/pickers\";\r\nimport { DateTimePicker as MuiDatetimePicker } from \"@material-ui/pickers/DateTimePicker\";\r\n\r\nclass LocalizedUtils extends DateFnsUtils {\r\n  getCalendarHeaderText(date) {\r\n    return format(date, \"M月\", { locale: this.locale });\r\n  }\r\n\r\n  getDatePickerHeaderText(date) {\r\n    return format(date, \"M月d日\", { locale: this.locale })\r\n  }\r\n\r\n  getYearText(date) {\r\n    return format(date, \"yyyy年\", { locale: this.locale })\r\n  }\r\n\r\n  getWeekdays() {\r\n    return [ \"日\", \"月\", \"火\", \"水\", \"木\", \"金\", \"土\" ];\r\n  }\r\n}\r\n\r\nconst DateTimePicker = ({ value, onChange, type, label = \"\" }) => {\r\n\r\n  const dateComponent = (\r\n    <DatePicker\r\n      disableToolbar\r\n      variant=\"inline\"\r\n      inputVariant=\"outlined\"\r\n      format=\"yyyy年M月d日\"\r\n      value={value}\r\n      onChange={onChange}\r\n      label={label}\r\n      autoOk={true}\r\n    />\r\n  )\r\n\r\n  const timeComponent = (\r\n    <TimePicker\r\n      disableToolbar\r\n      variant=\"inline\"\r\n      inputVariant=\"outlined\"\r\n      format=\"HH時mm分\"\r\n      value={value}\r\n      onChange={onChange}\r\n      label={label}\r\n      ampm={false}\r\n      autoOk={true}\r\n      fullWidth\r\n    />\r\n  )\r\n\r\n  const datetimeComponent = (\r\n    <MuiDatetimePicker\r\n      disableToolbar\r\n      variant=\"inline\"\r\n      inputVariant=\"outlined\"\r\n      format=\"yyyy年M月d日 HH時m分\"\r\n      value={value}\r\n      onChange={onChange}\r\n      label={label}\r\n    />\r\n  )\r\n\r\n  return (\r\n    <MuiPickersUtilsProvider utils={LocalizedUtils}>\r\n      {\r\n          type === \"date\" ? dateComponent\r\n        : type === \"datetime\" ? datetimeComponent\r\n        : type === \"time\" ? timeComponent\r\n        : <></>\r\n      }\r\n    </MuiPickersUtilsProvider>\r\n  );\r\n}\r\n\r\nexport default DateTimePicker;","import React from \"react\";\r\nimport { Toolbar, Typography, AppBar, IconButton, Icon } from \"@material-ui/core\";\r\nimport { StateContext } from \"../../context/context\";\r\nimport DateTimePicker from \"../DateTimePicker\";\r\n\r\nconst ApplicationBar = () => {\r\n\r\n  const [state, setState] = React.useContext(StateContext);\r\n\r\n  const prevDate = () => {\r\n    setState(state => {\r\n      const date = state.date;\r\n      date.setMonth(date.getMonth() - 1);\r\n      return { date, schedules: state.schedules }\r\n    })\r\n  }\r\n\r\n  const changeDate = (date) => {\r\n    setState(state => ({ date, schedules: state.schedules }))\r\n  }\r\n\r\n  const nextDate = () => {\r\n    setState(state => {\r\n      const date = state.date;\r\n      date.setMonth(date.getMonth() + 1);\r\n      return { date, schedules: state.schedules }\r\n    })\r\n  }\r\n\r\n  return (\r\n    <AppBar color=\"inherit\" position=\"static\">\r\n      <Toolbar>\r\n        <Typography variant=\"h6\">Calendar</Typography>\r\n        <IconButton onClick={prevDate}>\r\n          <Icon>keyboard_arrow_left</Icon>\r\n        </IconButton>\r\n        <DateTimePicker value={state.date} onChange={changeDate} type=\"date\"></DateTimePicker>\r\n        <IconButton onClick={nextDate}>\r\n          <Icon>keyboard_arrow_right</Icon>\r\n        </IconButton>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nexport default ApplicationBar;","import React from \"react\";\r\nimport \"./style.sass\";\r\n\r\nconst SchduleChip = ({text}) => {\r\n  return (\r\n    <div className=\"chip\">\r\n      <span className=\"chip__label\">{text}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SchduleChip;","export const whatList = [\r\n  { value: 1, label: \"Vue\" },\r\n  { value: 2, label: \"React\" },\r\n  { value: 3, label: \"Angular\" },\r\n  { value: 4, label: \"Java\" },\r\n  { value: 5, label: \"PHP\" }\r\n]","import React from 'react';\r\nimport \"./style.sass\";\r\nimport { Paper } from '@material-ui/core';\r\nimport { StateContext } from '../../context/context';\r\nimport SchduleChip from '../ScheduleChip';\r\nimport { whatList } from '../constans/const';\r\n\r\nconst CalendarElement = ({ date, showDayOfWeek }) => {\r\n\r\n  const [state, setState] = React.useContext(StateContext);\r\n  const selectedDate = state.date;\r\n  const isThisMonth = date.getFullYear() === selectedDate.getFullYear() && date.getMonth() === selectedDate.getMonth();\r\n  const isSelected = date.getMonth() === selectedDate.getMonth() && date.getDate() === selectedDate.getDate();\r\n\r\n  const dayOfWeeks = [ \"日\", \"月\", \"火\", \"水\", \"木\", \"金\", \"土\" ];\r\n\r\n  const day = date.getDay();\r\n\r\n  const modifire = day === 0 || day % 7 === 0 ? \"--sunday\"\r\n                 : day === 6 || (day - 6) % 7 === 0? \"--saturday\"\r\n                 : \"\";\r\n\r\n  const selectDate = () => {\r\n    setState(state => ({ date, schedules: state.schedules }))\r\n  }\r\n\r\n  return (\r\n    <Paper square className={`calendar-element${showDayOfWeek ? \"--first\" : \"\"}`}>\r\n      {/* 曜日 */}\r\n      {\r\n        showDayOfWeek && <div className={`calendar-element__day-of-week${modifire}`}>\r\n          {dayOfWeeks[day]}\r\n        </div>\r\n      }\r\n      {/* 日付 */}\r\n      <div className={`calendar-element__date${isThisMonth ? modifire : \"--not-this-month\"}`}\r\n           onClick={selectDate}>\r\n        <span className={`calendar-element__date label${isSelected ? \"--selected\": \"\"}`}>\r\n          {date.getDate()}\r\n        </span>\r\n      </div>\r\n      {/* 予定 */}\r\n      {\r\n        state.schedules\r\n          .filter(s => s.date === date.toLocaleDateString())\r\n          .map((s, i) => (<SchduleChip key={i} text={whatList.find(e => e.value === s.what).label + \" \" + s.time + \"H\"}></SchduleChip>))\r\n      }\r\n    </Paper>\r\n  );\r\n\r\n}\r\n\r\nexport default CalendarElement;","import React from \"react\";\r\nimport { Fab, Icon, Dialog, Paper, DialogActions, Button, DialogContent, MenuItem, TextField, withStyles, Typography, IconButton } from \"@material-ui/core\";\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport \"./style.sass\";\r\nimport Draggable from \"react-draggable\";\r\nimport { whatList } from \"../constans/const\";\r\nimport DateTimePicker from \"../DateTimePicker\";\r\nimport { StateContext } from \"../../context/context\";\r\n\r\nconst PaperComponent = (props) => {\r\n  return (\r\n    <Draggable handle=\"#draggable-dialog-title\">\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(2),\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)(({ children, onClose, classes }) => {\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} id=\"draggable-dialog-title\">\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" onClick={onClose} className={classes.closeButton}>\r\n          <Icon>close</Icon>\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst AddScheduleDialog = () => {\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const [whenStart, setWhenStart] = React.useState(new Date().getTime());\r\n  const [whenEnd, setWhenEnd] = React.useState(new Date().getTime());\r\n  const [what, setWhat] = React.useState(\"\");\r\n\r\n  const [, setState] = React.useContext(StateContext);\r\n\r\n  const time = Math.floor(((whenEnd - whenStart) / 3600000) / 0.5) * 0.5;\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleChangeWhat = (event) => {\r\n    setWhat(event.target.value);\r\n  }\r\n\r\n  const saveSchedule = () => {\r\n    setState(state => {\r\n      const schedule = { date: state.date.toLocaleDateString(), time, what }\r\n      state.schedules.push(schedule);\r\n      return { date: state.date, schedules: state.schedules };\r\n    });\r\n    setWhenStart(new Date().getTime());\r\n    setWhenEnd(new Date().getTime());\r\n    setWhat(\"\");\r\n    handleClose();\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        PaperComponent={PaperComponent}\r\n        className=\"add-schedule-dialog\"\r\n      >\r\n        <DialogTitle style={{ cursor: 'move' }} onClose={handleClose}>\r\n          積み上げ\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <div className=\"add-schedule-dialog__form\">\r\n            <DateTimePicker fullWidth type=\"time\" label=\"何時から\" value={whenStart} onChange={setWhenStart}></DateTimePicker>\r\n            から\r\n            <DateTimePicker fullWidth type=\"time\" label=\"何時まで\" value={whenEnd} onChange={setWhenEnd}></DateTimePicker>\r\n            の{time}時間\r\n            <TextField\r\n              select\r\n              label=\"なにを？\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              value={what}\r\n              onChange={handleChangeWhat}\r\n            >\r\n              {whatList.map(what => (\r\n                <MenuItem key={what.value} value={what.value}>{what.label}</MenuItem>\r\n              ))}\r\n            </TextField>\r\n          </div>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={saveSchedule} color=\"primary\">をやった。</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      <Fab className=\"add-schedule-dialog__btn\" color=\"default\" variant=\"round\" onClick={handleClickOpen}>\r\n        <Icon>add</Icon>\r\n      </Fab>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AddScheduleDialog;","import React from \"react\";\r\nimport { GridList, GridListTile } from \"@material-ui/core\";\r\nimport CalendarElement from \"../CalendarElement\";\r\nimport \"./style.sass\";\r\nimport { StateContext } from \"../../context/context\";\r\nimport AddScheduleDialog from \"../AddScheduleDialog\";\r\n\r\nconst Calendar = () => {\r\n\r\n  const [state] = React.useContext(StateContext);\r\n  const selectedDate = state.date;\r\n\r\n  const dateList = [...Array(42).keys()].map(i => {\r\n    const date = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1);\r\n    date.setDate(date.getDate() - date.getDay() + i);\r\n    return date;\r\n  })\r\n\r\n  const isThisMonth = (date) => date.getFullYear() === selectedDate.getFullYear() && date.getMonth() === selectedDate.getMonth();\r\n\r\n  const isToday = (date) => date.getMonth() === selectedDate.getMonth() && date.getDate() === selectedDate.getDate();\r\n\r\n  return (\r\n    <div className=\"calendar\">\r\n      <GridList cellHeight=\"auto\" cols={7} spacing={0}>\r\n        {dateList.map((date, i) => (\r\n          <GridListTile key={i} cols={1}>\r\n            <CalendarElement date={date} showDayOfWeek={i < 7} thisMonth={isThisMonth(date)} today={isToday(date)}></CalendarElement>\r\n          </GridListTile>\r\n        ))}\r\n      </GridList>\r\n      <AddScheduleDialog></AddScheduleDialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Calendar;\r\n","import React, { useState } from 'react';\nimport ApplicationBar from './components/ApplicationBar';\nimport Calendar from './components/Calendar';\nimport { initialState, StateContext } from \"./context/context\"; \n\nconst App = () => {\n\n  const [state, setState] = useState(initialState)\n\n  return (\n    <StateContext.Provider value={[state, setState]}>\n      <ApplicationBar></ApplicationBar>\n      <Calendar></Calendar>\n    </StateContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.sass';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}